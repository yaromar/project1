{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python 3\n",
    "import re\n",
    "\n",
    "PATH = \"./\"\n",
    "#PATH = \"/net/pan1/interactomes/pipeline/Interactome/Workflow/Interfaces/\"\n",
    "CHAIN_FILE = \"chains\"\n",
    "PDB_LIST = \"pdbList.tsv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARAMETERS:\n",
    "#fils is a string with path to the file to be checked\n",
    "\n",
    "#RESULTS:\n",
    "#Returns 1 or 0 depending on file existence \n",
    "\n",
    "\n",
    "def file_check(file):\n",
    "    \n",
    "    try:\n",
    "        open(file, \"r\")\n",
    "        return 1\n",
    "    \n",
    "    except IOError:\n",
    "        print(\"Error: \" + file + \" does not appear to exist.\")\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARAMETERS:\n",
    "#name is a string with the name of chain\n",
    "#typeCount is a 2-element list with the first one being an empty string and the second - 0 (iteger)\n",
    "\n",
    "#RESULTS:\n",
    "#Updates the typeCount array: the first element = general histone type(s); the second element = (should be) number of histones in chain\n",
    "\n",
    "def is_histone(name, typeCount):\n",
    "\n",
    "    if(not re.search(r'chaperone|ase|binding|p53 peptide|non-histone|jmjc|rna|synth', name, re.I)):\n",
    "        if(re.search(r'histone.*h?\\d|h?\\d.*histone|h?\\d.*histone-like|histone-like.*h?\\d|histone macro.*h?\\d|h?\\d.*histone macro|h?\\d.*\\speptide|\\speptide.*h?\\d|h3k4me0|h3(1-9)k4me3|$h\\d^|archaeal histone|histone peptide', name, re.I)):\n",
    "            typeCount[1] = 1 #adds the number of histones in chain  (should be changed to actual number of histones in chain!!!)\n",
    "\n",
    "            if(re.search(r'h2a', name, re.I)):\n",
    "                typeCount[0] += 'h2a|'\n",
    "                \n",
    "            elif(re.search(r'h2b', name, re.I)):\n",
    "                typeCount[0] += 'h2b|'\n",
    "                    \n",
    "            elif(re.search(r'h3', name, re.I)):\n",
    "                typeCount[0] += 'h3|'\n",
    "                    \n",
    "            elif(re.search(r'h4', name, re.I)):\n",
    "                typeCount[0] += 'h4|'\n",
    "                    \n",
    "            elif(re.search(r'h1', name, re.I)):\n",
    "                typeCount[0] += 'h1|'  \n",
    "                    \n",
    "            elif(re.search(r'h5', name, re.I)):\n",
    "                typeCount[0] += 'h5|'\n",
    "                    \n",
    "            else:\n",
    "                typeCount[0] += 'some histone|'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARAMETERS: \n",
    "#pdbList is a text file with a header and one column PDB\n",
    "#files is a list\n",
    "#parameter is a string, either 'mapping' or 'interface' depending on desired results\n",
    "\n",
    "#RESULTS:\n",
    "#A list of absolute paths to either mapping files or interface files as it is stored on local NCBI machines\n",
    "\n",
    "\n",
    "def get_files(pdbList, files, parameter):\n",
    "    \n",
    "    with open(pdbList, 'r') as pfh:\n",
    "        pfh.readline()\n",
    "        \n",
    "        if(parameter == 'mapping'):\n",
    "            \n",
    "            for line in pfh:\n",
    "                line = line.strip()\n",
    "                folder = line[1] + line[2] \n",
    "                files.append(PATH + folder + '/' + line + '_chain_protein_mapping.tab')\n",
    "                \n",
    "        elif(parameter == 'interface'): \n",
    "            \n",
    "            for line in pfh:\n",
    "                line = line.strip()\n",
    "                folder = line[1] + line[2]\n",
    "                files.append(PATH + folder + '/' + line + '_atomic_contacts_5.0A.tab')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARAMETERS:\n",
    "#cFile is tab-separated file with a header and 4 columns: pdb, chain, uniprot, name\n",
    "#dictionary is nested with the innermost dict being dictionary['pdb'] = {}\n",
    "\n",
    "#RESULTS: \n",
    "#The format of the end-product dictionary is: {pdb : {AlexChain: myChain|UNIPROT|name|type|process|function|organism|nucleosome(bool)|bindingPartner(bool)}}\n",
    "#Example: {1alq : {'G': 'E|P02302|Histone H3.3C|H3|1212|4141|human|1|0'}}\n",
    "\n",
    "\n",
    "def get_chain_dictionaries(cFile, dictionary): \n",
    "    \n",
    "    with open(cFile, 'r') as cfh:\n",
    "        cfh.readline()\n",
    "        \n",
    "        histoneCount = {} #is used to count number of histones in a structure!!!!!!!\n",
    "        \n",
    "        tempDict = {}\n",
    "        tempDict['pdb'] = {}\n",
    "            \n",
    "        mappingFiles = [] \n",
    "        get_files(PDB_LIST, mappingFiles, 'mapping')\n",
    "        \n",
    "        \n",
    "        for file in mappingFiles:\n",
    "\n",
    "            try: #adds a pdb entry to the dict only if mapping file exists\n",
    "\n",
    "                with open(file, 'r') as mfh:\n",
    "                    mfh.readline() #skips header\n",
    "                    pdb = file.split('/')[-1].split('_', 1)[0]\n",
    "\n",
    "                    for mLine in mfh:\n",
    "                        chainPair = mLine.split('\\t', 2)\n",
    "                        alexChain = chainPair[0]\n",
    "                        myChain = chainPair[1]\n",
    "                        \n",
    "                        if(pdb in tempDict):\n",
    "                            tempDict[pdb][alexChain] = myChain\n",
    "\n",
    "                        else:\n",
    "                            tempDict[pdb] = {alexChain : myChain}\n",
    "\n",
    "                \n",
    "            except IOError:\n",
    "                pass\n",
    "                print(\"Error: \" + mappingFile + \" does not appear to exist.\")\n",
    "        \n",
    "        \n",
    "        \n",
    "        for cLine in cfh:           \n",
    "            fields = cLine.strip().split('\\t')\n",
    "\n",
    "            pdb = fields[0]\n",
    "            \n",
    "            if(pdb in tempDict): #continues only if a mapping file exists\n",
    "                chain = fields[1]\n",
    "                uniprot = fields[2]\n",
    "                name = fields[3]\n",
    "\n",
    "                histoneTypeAndCount = ['', 0]\n",
    "\n",
    "                is_histone(name, histoneTypeAndCount) #checks whether the name looks like a histone!!!!!!!!!\n",
    "\n",
    "                tempType = histoneTypeAndCount[0]\n",
    "                tempCount = histoneTypeAndCount[1]\n",
    "                \n",
    "                #######################\n",
    "                if(tempCount): #if the chain is a [part of a] histone\n",
    "                    \n",
    "                    if(pdb in histoneCount):\n",
    "\n",
    "                        if(tempType not in histoneCount[pdb]):\n",
    "                            histoneCount[pdb].append(tempType) #!!!!!!\n",
    "\n",
    "                    else:\n",
    "                        histoneCount[pdb] = [tempType]       \n",
    "                        \n",
    "                try: #adds a chain entry to the dict only if there exists a corresponding chain in the mapping file\n",
    "                    alexChain = list(tempDict[pdb].keys())[list(tempDict[pdb].values()).index(chain)]\n",
    "\n",
    "                    if(pdb in dictionary):\n",
    "\n",
    "                        if(tempCount): #checks if chain is a histone!!!!\n",
    "                            dictionary[pdb][alexChain] = str(tempDict[pdb][alexChain]) + '|' + uniprot + '|' + name + '|' + tempType #!!!!\n",
    "\n",
    "                        else: #!!!!\n",
    "                            dictionary[pdb][alexChain] = str(tempDict[pdb][alexChain]) + '|' + uniprot + '|' + name + '|' + 'other|'#!!!!\n",
    "\n",
    "                    else:\n",
    "\n",
    "                        if(tempCount): #checks if chain is a histone!!!!\n",
    "                            dictionary[pdb] = {alexChain : str(tempDict[pdb][alexChain]) + '|' + uniprot + '|' + name + '|' + tempType} #!!!!\n",
    "\n",
    "                        else: #!!!!\n",
    "                            dictionary[pdb] = {alexChain : str(tempDict[pdb][alexChain]) + '|' + uniprot + '|' + name + '|' + 'other|'} #!!!!\n",
    "                        \n",
    "                except ValueError:\n",
    "                    print(\"Error: \" + str(ValueError) + \", in \" + pdb)               \n",
    "                    pass\n",
    "\n",
    "                    \n",
    "                    \n",
    "        for structure in list(dictionary): \n",
    "            \n",
    "            if(structure in histoneCount):\n",
    "                uniqueHistoneNum = len(histoneCount[structure])\n",
    "                partnerFlag = 0\n",
    "            \n",
    "                if(uniqueHistoneNum > 2): #checks if pdb has at least a 3 different histones ~ is a nucleosome!!!!!!!\n",
    "\n",
    "                    for chain in dictionary[structure]:\n",
    "                        chainFields = dictionary[structure][chain].split('|')\n",
    "\n",
    "                        chainType = chainFields[3]##\n",
    "\n",
    "                        dictionary[structure][chain] += 'nucleosome:1|' #!!!!!!\n",
    "\n",
    "                        if(partnerFlag == 0 and chainType == 'other'):\n",
    "                            partnerFlag = 1\n",
    "\n",
    "                    if(partnerFlag == 0):\n",
    "\n",
    "                        for chain in dictionary[structure]:\n",
    "                            dictionary[structure][chain] += 'bp:0|'\n",
    "\n",
    "                    else:\n",
    "\n",
    "                        for chain in dictionary[structure]:\n",
    "                            dictionary[structure][chain] += 'bp:1|'\n",
    "\n",
    "                else: #!!!!!!\n",
    "\n",
    "                    for chain in dictionary[structure]: #!!!!!\n",
    "                        chainFields = dictionary[structure][chain].split('|')\n",
    "\n",
    "                        chainType = chainFields[3]\n",
    "\n",
    "                        dictionary[structure][chain] += 'nucleosome:0|' #!!!!!! \n",
    "\n",
    "                        if(partnerFlag == 0 and chainType == 'other'):\n",
    "                            partnerFlag = 1\n",
    "\n",
    "                    if(partnerFlag == 0):\n",
    "\n",
    "                        for chain in dictionary[structure]:\n",
    "                            dictionary[structure][chain] += 'bp:0|'\n",
    "                            \n",
    "                    else:\n",
    "\n",
    "                        for chain in dictionary[structure]:\n",
    "                            dictionary[structure][chain] += 'bp:1|'\n",
    "            \n",
    "            else:\n",
    "                del dictionary[structure]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
